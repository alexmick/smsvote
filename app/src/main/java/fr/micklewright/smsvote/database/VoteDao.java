package fr.micklewright.smsvote.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table VOTE.
*/
public class VoteDao extends AbstractDao<Vote, Void> {

    public static final String TABLENAME = "VOTE";

    /**
     * Properties of entity Vote.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ContactNumber = new Property(0, long.class, "contactNumber", false, "CONTACT_NUMBER");
        public final static Property ApplicationId = new Property(1, long.class, "applicationId", false, "APPLICATION_ID");
    };

    private DaoSession daoSession;

    private Query<Vote> contact_VotesQuery;
    private Query<Vote> application_VotesQuery;

    public VoteDao(DaoConfig config) {
        super(config);
    }
    
    public VoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'VOTE' (" + //
                "'CONTACT_NUMBER' INTEGER NOT NULL ," + // 0: contactNumber
                "'APPLICATION_ID' INTEGER NOT NULL );"); // 1: applicationId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VOTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Vote entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getContactNumber());
        stmt.bindLong(2, entity.getApplicationId());
    }

    @Override
    protected void attachEntity(Vote entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Vote readEntity(Cursor cursor, int offset) {
        Vote entity = new Vote( //
            cursor.getLong(offset + 0), // contactNumber
            cursor.getLong(offset + 1) // applicationId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Vote entity, int offset) {
        entity.setContactNumber(cursor.getLong(offset + 0));
        entity.setApplicationId(cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Vote entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Vote entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "votes" to-many relationship of Contact. */
    public List<Vote> _queryContact_Votes(long contactNumber) {
        synchronized (this) {
            if (contact_VotesQuery == null) {
                QueryBuilder<Vote> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ContactNumber.eq(null));
                contact_VotesQuery = queryBuilder.build();
            }
        }
        Query<Vote> query = contact_VotesQuery.forCurrentThread();
        query.setParameter(0, contactNumber);
        return query.list();
    }

    /** Internal query to resolve the "votes" to-many relationship of Application. */
    public List<Vote> _queryApplication_Votes(long applicationId) {
        synchronized (this) {
            if (application_VotesQuery == null) {
                QueryBuilder<Vote> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ApplicationId.eq(null));
                application_VotesQuery = queryBuilder.build();
            }
        }
        Query<Vote> query = application_VotesQuery.forCurrentThread();
        query.setParameter(0, applicationId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getContactDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getApplicationDao().getAllColumns());
            builder.append(" FROM VOTE T");
            builder.append(" LEFT JOIN CONTACT T0 ON T.'CONTACT_NUMBER'=T0.'NUMBER'");
            builder.append(" LEFT JOIN APPLICATION T1 ON T.'APPLICATION_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Vote loadCurrentDeep(Cursor cursor, boolean lock) {
        Vote entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Contact contact = loadCurrentOther(daoSession.getContactDao(), cursor, offset);
         if(contact != null) {
            entity.setContact(contact);
        }
        offset += daoSession.getContactDao().getAllColumns().length;

        Application application = loadCurrentOther(daoSession.getApplicationDao(), cursor, offset);
         if(application != null) {
            entity.setApplication(application);
        }

        return entity;    
    }

    public Vote loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Vote> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Vote> list = new ArrayList<Vote>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Vote> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Vote> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
