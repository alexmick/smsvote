package fr.micklewright.smsvote.database;

import fr.micklewright.smsvote.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table PARTICIPATION.
 */
public class Participation {

    private long contactNumber;
    private long electionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ParticipationDao myDao;

    private Contact contact;
    private Long contact__resolvedKey;

    private Election election;
    private Long election__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Participation() {
    }

    public Participation(long contactNumber, long electionId) {
        this.contactNumber = contactNumber;
        this.electionId = electionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getParticipationDao() : null;
    }

    public long getContactNumber() {
        return contactNumber;
    }

    public void setContactNumber(long contactNumber) {
        this.contactNumber = contactNumber;
    }

    public long getElectionId() {
        return electionId;
    }

    public void setElectionId(long electionId) {
        this.electionId = electionId;
    }

    /** To-one relationship, resolved on first access. */
    public Contact getContact() {
        long __key = this.contactNumber;
        if (contact__resolvedKey == null || !contact__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactDao targetDao = daoSession.getContactDao();
            Contact contactNew = targetDao.load(__key);
            synchronized (this) {
                contact = contactNew;
            	contact__resolvedKey = __key;
            }
        }
        return contact;
    }

    public void setContact(Contact contact) {
        if (contact == null) {
            throw new DaoException("To-one property 'contactNumber' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.contact = contact;
            contactNumber = contact.getNumber();
            contact__resolvedKey = contactNumber;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Election getElection() {
        long __key = this.electionId;
        if (election__resolvedKey == null || !election__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ElectionDao targetDao = daoSession.getElectionDao();
            Election electionNew = targetDao.load(__key);
            synchronized (this) {
                election = electionNew;
            	election__resolvedKey = __key;
            }
        }
        return election;
    }

    public void setElection(Election election) {
        if (election == null) {
            throw new DaoException("To-one property 'electionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.election = election;
            electionId = election.getId();
            election__resolvedKey = electionId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
