package fr.micklewright.smsvote.database;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table POST.
 */
public class Post {

    private Long id;
    private String name;
    private Integer places;
    private long electionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PostDao myDao;

    private Election election;
    private Long election__resolvedKey;

    private List<Application> applications;

    public Post() {
    }

    public Post(Long id) {
        this.id = id;
    }

    public Post(Long id, String name, Integer places, long electionId) {
        this.id = id;
        this.name = name;
        this.places = places;
        this.electionId = electionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPostDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getPlaces() {
        return places;
    }

    public void setPlaces(Integer places) {
        this.places = places;
    }

    public long getElectionId() {
        return electionId;
    }

    public void setElectionId(long electionId) {
        this.electionId = electionId;
    }

    /** To-one relationship, resolved on first access. */
    public Election getElection() {
        long __key = this.electionId;
        if (election__resolvedKey == null || !election__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ElectionDao targetDao = daoSession.getElectionDao();
            Election electionNew = targetDao.load(__key);
            synchronized (this) {
                election = electionNew;
            	election__resolvedKey = __key;
            }
        }
        return election;
    }

    public void setElection(Election election) {
        if (election == null) {
            throw new DaoException("To-one property 'electionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.election = election;
            electionId = election.getId();
            election__resolvedKey = electionId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Application> getApplications() {
        if (applications == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ApplicationDao targetDao = daoSession.getApplicationDao();
            List<Application> applicationsNew = targetDao._queryPost_Applications(id);
            synchronized (this) {
                if(applications == null) {
                    applications = applicationsNew;
                }
            }
        }
        return applications;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetApplications() {
        applications = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
