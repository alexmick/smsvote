package fr.micklewright.smsvote.database;

import java.util.List;
import fr.micklewright.smsvote.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table APPLICATION.
 */
public class Application {

    private Long id;
    private Integer candidateNumber;
    private long postId;
    private long applicantId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ApplicationDao myDao;

    private Post post;
    private Long post__resolvedKey;

    private Contact contact;
    private Long contact__resolvedKey;

    private List<Vote> votes;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Application() {
    }

    public Application(Long id) {
        this.id = id;
    }

    public Application(Long id, Integer candidateNumber, long postId, long applicantId) {
        this.id = id;
        this.candidateNumber = candidateNumber;
        this.postId = postId;
        this.applicantId = applicantId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getApplicationDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getCandidateNumber() {
        return candidateNumber;
    }

    public void setCandidateNumber(Integer candidateNumber) {
        this.candidateNumber = candidateNumber;
    }

    public long getPostId() {
        return postId;
    }

    public void setPostId(long postId) {
        this.postId = postId;
    }

    public long getApplicantId() {
        return applicantId;
    }

    public void setApplicantId(long applicantId) {
        this.applicantId = applicantId;
    }

    /** To-one relationship, resolved on first access. */
    public Post getPost() {
        long __key = this.postId;
        if (post__resolvedKey == null || !post__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PostDao targetDao = daoSession.getPostDao();
            Post postNew = targetDao.load(__key);
            synchronized (this) {
                post = postNew;
            	post__resolvedKey = __key;
            }
        }
        return post;
    }

    public void setPost(Post post) {
        if (post == null) {
            throw new DaoException("To-one property 'postId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.post = post;
            postId = post.getId();
            post__resolvedKey = postId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Contact getContact() {
        long __key = this.applicantId;
        if (contact__resolvedKey == null || !contact__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactDao targetDao = daoSession.getContactDao();
            Contact contactNew = targetDao.load(__key);
            synchronized (this) {
                contact = contactNew;
            	contact__resolvedKey = __key;
            }
        }
        return contact;
    }

    public void setContact(Contact contact) {
        if (contact == null) {
            throw new DaoException("To-one property 'applicantId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.contact = contact;
            applicantId = contact.getNumber();
            contact__resolvedKey = applicantId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Vote> getVotes() {
        if (votes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VoteDao targetDao = daoSession.getVoteDao();
            List<Vote> votesNew = targetDao._queryApplication_Votes(id);
            synchronized (this) {
                if(votes == null) {
                    votes = votesNew;
                }
            }
        }
        return votes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetVotes() {
        votes = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
